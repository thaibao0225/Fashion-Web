// <auto-generated />
using System;
using Fashion_Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fashion_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230316211101_init13")]
    partial class init13
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Fashion_Infrastructure.Entities.BillsTable", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("bill_Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("bill_CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("bill_IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_IsPayment")
                        .HasColumnType("bit");

                    b.Property<int>("bill_Price")
                        .HasColumnType("int");

                    b.Property<string>("bill_ProductColorList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPriceList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizeList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductUnitList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductsIdList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.CategoriesTable", b =>
                {
                    b.Property<string>("category_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("category_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("category_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            category_Id = "70bc00d9-b541-4e48-a066-2aea81a18c04",
                            IsDelete = false,
                            category_Description = "",
                            category_IsDelete = false,
                            category_Name = "category_Name1"
                        },
                        new
                        {
                            category_Id = "5e4d375b-9bd6-484c-9591-015e751704b1",
                            IsDelete = false,
                            category_Description = "",
                            category_IsDelete = false,
                            category_Name = "category_Name2"
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ColorInProductTable", b =>
                {
                    b.Property<string>("cip_ColorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cip_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("cip_IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("cip_ColorId", "cip_ProductId");

                    b.HasIndex("cip_ProductId");

                    b.ToTable("ColorInProduct", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ColorsTable", b =>
                {
                    b.Property<string>("color_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("color_IdDelete")
                        .HasColumnType("bit");

                    b.Property<string>("color_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("color_Id");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.CommentTable", b =>
                {
                    b.Property<string>("comment_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("comment_ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("comment_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comment_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("comment_Id");

                    b.HasIndex("comment_ProductId");

                    b.HasIndex("comment_UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ContactTable", b =>
                {
                    b.Property<string>("contact_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("contact_EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("emailC_IsCheck")
                        .HasColumnType("bit");

                    b.Property<string>("emailC_Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailC_Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("contact_Id");

                    b.HasIndex("contact_EmailId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.EmailCustomerTable", b =>
                {
                    b.Property<string>("emailC_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("emailC_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("emailC_IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("emailC_Id");

                    b.ToTable("EmailCustomer", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ProductsTable", b =>
                {
                    b.Property<string>("product_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("product_CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("product_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("product_Price")
                        .HasColumnType("float");

                    b.Property<int?>("product_Rate")
                        .HasColumnType("int");

                    b.Property<string>("product_ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("product_Sold")
                        .HasColumnType("int");

                    b.Property<string>("product_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("product_ViewNumber")
                        .HasColumnType("int");

                    b.HasKey("product_Id");

                    b.HasIndex("product_CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            product_Id = "b2536e58-654a-4154-9681-c6784a7c294f",
                            CreateBy = "",
                            CreateOn = new DateTime(2023, 3, 17, 4, 11, 0, 626, DateTimeKind.Local).AddTicks(5560),
                            IsDelete = false,
                            UpdateBy = "",
                            UpdateOn = new DateTime(2023, 3, 17, 4, 11, 0, 627, DateTimeKind.Local).AddTicks(5855),
                            product_CategoryId = "70bc00d9-b541-4e48-a066-2aea81a18c04",
                            product_Description = "Guard dog",
                            product_Img1 = "img1",
                            product_Img2 = "img2",
                            product_Img3 = "img3",
                            product_Img4 = "img4",
                            product_Img5 = "img5",
                            product_Name = "Guard dog",
                            product_Price = 10.0,
                            product_Rate = 4,
                            product_ShortDescription = "Short Description",
                            product_Sold = 10,
                            product_Type = "Type1",
                            product_ViewNumber = 10
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.SizeInProductTable", b =>
                {
                    b.Property<string>("sip_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("sip_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("sip_IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("sip_Id", "sip_ProductId");

                    b.HasIndex("sip_ProductId");

                    b.ToTable("SizeInProduct", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.SizeTable", b =>
                {
                    b.Property<string>("size_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("size_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("size_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("size_Id");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9fe4b0e8-9381-4859-aecf-15f25277dace",
                            RoleId = "b4cbc620-ce27-4a6e-a5ba-e0bb50fae60e"
                        },
                        new
                        {
                            UserId = "849d3d63-d2b3-4850-b3e8-b307f99bf9b9",
                            RoleId = "a59dda07-5e20-4c51-a73b-fb2956aad1cc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.RolesTable", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("RolesTable");

                    b.HasData(
                        new
                        {
                            Id = "b4cbc620-ce27-4a6e-a5ba-e0bb50fae60e",
                            ConcurrencyStamp = "e10a76d2-21c4-4307-90ef-f274caff536d",
                            Name = "Admin",
                            NormalizedName = "admin",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "a59dda07-5e20-4c51-a73b-fb2956aad1cc",
                            ConcurrencyStamp = "02dc8bc9-3dcc-4626-873c-f4fb6d8a818c",
                            Name = "Staff",
                            NormalizedName = "staff",
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.UsersTable", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UsersTable");

                    b.HasData(
                        new
                        {
                            Id = "9fe4b0e8-9381-4859-aecf-15f25277dace",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d77e734a-c5c7-4bc1-88a6-860e99914091",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN+oslmtxZMoPPc1ngHa5QOSzp0c2KYDJB4jof9ppmffL1KKtDnAxx+qlY1OPK6xcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beda6ae2-11ab-4193-b128-266c200840ce",
                            TwoFactorEnabled = false,
                            UserName = "Staft",
                            Address = "",
                            FirstName = "",
                            IsDelete = false,
                            LastName = ""
                        },
                        new
                        {
                            Id = "849d3d63-d2b3-4850-b3e8-b307f99bf9b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "954ae93d-3d4c-4c68-b4bb-ce864ca0f727",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFTE/GECieB3ChgMBBnmm3u720OUNYPg5ORC4Mr9KekKnpZYY8ahljmSTBSOqkd5Iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6412787d-76cb-40b1-b108-43ae856b3139",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            Address = "",
                            FirstName = "",
                            IsDelete = false,
                            LastName = ""
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.BillsTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.UsersTable", "userTable_UserId")
                        .WithMany("billsTablesList")
                        .HasForeignKey("bill_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userTable_UserId");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ColorInProductTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.ColorsTable", "cip_Color")
                        .WithMany("color_InProductsList")
                        .HasForeignKey("cip_ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fashion_Infrastructure.Entities.ProductsTable", "cip_Product")
                        .WithMany("product_colorInProductTablesList")
                        .HasForeignKey("cip_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cip_Color");

                    b.Navigation("cip_Product");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.CommentTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.ProductsTable", "comment_ProductsTable")
                        .WithMany("product_CommentTableList")
                        .HasForeignKey("comment_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fashion_Infrastructure.Entities.UsersTable", "comment_UsersTable")
                        .WithMany("CommentTableList")
                        .HasForeignKey("comment_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comment_ProductsTable");

                    b.Navigation("comment_UsersTable");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ContactTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.EmailCustomerTable", "contact_EmailCustomerTable")
                        .WithMany("emailC_ContactTableList")
                        .HasForeignKey("contact_EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact_EmailCustomerTable");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ProductsTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.CategoriesTable", "product_CategoriesTable")
                        .WithMany("ProductsTableList")
                        .HasForeignKey("product_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product_CategoriesTable");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.SizeInProductTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.SizeTable", "sip_Size")
                        .WithMany("size_sizeInProductTablesList")
                        .HasForeignKey("sip_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fashion_Infrastructure.Entities.ProductsTable", "sip_Product")
                        .WithMany("product_sizeInProductTablesList")
                        .HasForeignKey("sip_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sip_Product");

                    b.Navigation("sip_Size");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.CategoriesTable", b =>
                {
                    b.Navigation("ProductsTableList");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ColorsTable", b =>
                {
                    b.Navigation("color_InProductsList");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.EmailCustomerTable", b =>
                {
                    b.Navigation("emailC_ContactTableList");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ProductsTable", b =>
                {
                    b.Navigation("product_CommentTableList");

                    b.Navigation("product_colorInProductTablesList");

                    b.Navigation("product_sizeInProductTablesList");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.SizeTable", b =>
                {
                    b.Navigation("size_sizeInProductTablesList");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.UsersTable", b =>
                {
                    b.Navigation("CommentTableList");

                    b.Navigation("billsTablesList");
                });
#pragma warning restore 612, 618
        }
    }
}
