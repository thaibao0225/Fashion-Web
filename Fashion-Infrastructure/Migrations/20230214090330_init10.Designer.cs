// <auto-generated />
using System;
using Fashion_Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fashion_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230214090330_init10")]
    partial class init10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Fashion_Infrastructure.Entities.BillsTable", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_Code")
                        .HasColumnType("int");

                    b.Property<double>("bill_Price")
                        .HasColumnType("float");

                    b.Property<string>("bill_ProductColorList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPriceList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizeList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductUnitList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductsIdList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills", (string)null);

                    b.HasData(
                        new
                        {
                            bill_Id = "09129eb4-63e3-4512-b74b-5ed0b0b2d9df",
                            CreateBy = "CreateBy",
                            CreateOn = "CreateOn",
                            IsDelete = false,
                            UpdateBy = "UpdateBy",
                            UpdateOn = "UpdateOn",
                            bill_Code = 1,
                            bill_Price = 0.0,
                            bill_ProductColorList = "",
                            bill_ProductPriceList = "",
                            bill_ProductSizeList = "",
                            bill_ProductUnitList = "",
                            bill_ProductsIdList = "",
                            bill_UserId = "e3e849c6-8b5e-49fc-9410-ed8c7fd58c29"
                        },
                        new
                        {
                            bill_Id = "4fdea10c-54e8-4f0a-8140-adc09c122c64",
                            CreateBy = "CreateBy",
                            CreateOn = "CreateOn",
                            IsDelete = false,
                            UpdateBy = "UpdateBy",
                            UpdateOn = "UpdateOn",
                            bill_Code = 1,
                            bill_Price = 0.0,
                            bill_ProductColorList = "",
                            bill_ProductPriceList = "",
                            bill_ProductSizeList = "",
                            bill_ProductUnitList = "",
                            bill_ProductsIdList = "",
                            bill_UserId = "e3e849c6-8b5e-49fc-9410-ed8c7fd58c29"
                        },
                        new
                        {
                            bill_Id = "5dec2539-4a78-4273-8248-c0788d91f2bf",
                            CreateBy = "CreateBy",
                            CreateOn = "CreateOn",
                            IsDelete = false,
                            UpdateBy = "UpdateBy",
                            UpdateOn = "UpdateOn",
                            bill_Code = 1,
                            bill_Price = 0.0,
                            bill_ProductColorList = "",
                            bill_ProductPriceList = "",
                            bill_ProductSizeList = "",
                            bill_ProductUnitList = "",
                            bill_ProductsIdList = "",
                            bill_UserId = "ec647bb9-2988-4ff3-9242-00872eeb0241"
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.CategoriesTable", b =>
                {
                    b.Property<string>("category_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categpry_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            category_Id = "e21a4c32-261c-4bca-b7da-c9c24281e523",
                            CreateBy = "CreateBy",
                            CreateOn = "CreateOn",
                            IsDelete = false,
                            UpdateBy = "UpdateBy",
                            UpdateOn = "UpdateOn",
                            category_Name = "category_Name",
                            categpry_Description = "category_Description"
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ProductsTable", b =>
                {
                    b.Property<string>("product_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("product_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Img5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("product_Price")
                        .HasColumnType("float");

                    b.Property<int?>("product_Rate")
                        .HasColumnType("int");

                    b.Property<string>("product_ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("product_Sold")
                        .HasColumnType("int");

                    b.Property<string>("product_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("product_ViewNumber")
                        .HasColumnType("int");

                    b.HasKey("product_Id");

                    b.HasIndex("product_CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            product_Id = "434c970d-79a2-4d97-b458-b7cc685c1cba",
                            CreateBy = "CreateBy",
                            CreateOn = "CreateOn",
                            IsDelete = false,
                            UpdateBy = "UpdateBy",
                            UpdateOn = "UpdateOn",
                            product_CategoryId = "e21a4c32-261c-4bca-b7da-c9c24281e523",
                            product_Description = "Guard dog",
                            product_Img1 = "img1",
                            product_Img2 = "img2",
                            product_Img3 = "img3",
                            product_Img4 = "img4",
                            product_Img5 = "img5",
                            product_Name = "Guard dog",
                            product_Price = 10.0,
                            product_Rate = 4,
                            product_ShortDescription = "Short Description",
                            product_Sold = 10,
                            product_Type = "Type1",
                            product_ViewNumber = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e3e849c6-8b5e-49fc-9410-ed8c7fd58c29",
                            RoleId = "e0bce046-dbaa-4693-a0fe-0d4f134f6470"
                        },
                        new
                        {
                            UserId = "ec647bb9-2988-4ff3-9242-00872eeb0241",
                            RoleId = "19e97f82-bfc2-4b8d-b498-8c074b89a90d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.RolesTable", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("RolesTable");

                    b.HasData(
                        new
                        {
                            Id = "e0bce046-dbaa-4693-a0fe-0d4f134f6470",
                            ConcurrencyStamp = "fef2a43f-9a74-42e0-8e6f-8572d02bac28",
                            Name = "ADMIN",
                            NormalizedName = "admin",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "19e97f82-bfc2-4b8d-b498-8c074b89a90d",
                            ConcurrencyStamp = "08c9d1c7-0045-4843-8da0-1edea64e3bd3",
                            Name = "STAFF",
                            NormalizedName = "staff",
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.UsersTable", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UsersTable");

                    b.HasData(
                        new
                        {
                            Id = "e3e849c6-8b5e-49fc-9410-ed8c7fd58c29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06be6e50-73bf-4431-bccb-4f7de944f131",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELQPBYn4imeEpkcQV1Y8Oq46P5NUIJ9IYO7HQ/jjFf2lkraIRLYXGoIJHgY/R/PM/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acd080f3-4d19-4710-9844-272fd235cef1",
                            TwoFactorEnabled = false,
                            UserName = "Staft",
                            Address = "",
                            FirstName = "",
                            IsDelete = false,
                            LastName = ""
                        },
                        new
                        {
                            Id = "ec647bb9-2988-4ff3-9242-00872eeb0241",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "909dcd2a-af54-4502-86fe-771b3b82214e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC31LTTjlJykAEW59t5V5HjhclKf4cUuJ1BhcaqQ/53rryhg2tMHkz674AoJ/C0hVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dbe25bf-6e41-4894-8e79-9d7f100993b2",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            Address = "",
                            FirstName = "",
                            IsDelete = false,
                            LastName = ""
                        });
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.BillsTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.UsersTable", "userTable_UserId")
                        .WithMany("billsTablesList")
                        .HasForeignKey("bill_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userTable_UserId");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.ProductsTable", b =>
                {
                    b.HasOne("Fashion_Infrastructure.Entities.CategoriesTable", "productCategoryId")
                        .WithMany("Products")
                        .HasForeignKey("product_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productCategoryId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.CategoriesTable", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Fashion_Infrastructure.Entities.UsersTable", b =>
                {
                    b.Navigation("billsTablesList");
                });
#pragma warning restore 612, 618
        }
    }
}
